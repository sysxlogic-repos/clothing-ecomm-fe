{"ast":null,"code":"import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Helper function to get service information\nconst getServiceInfo = endpoint => {\n  const serviceMap = {\n    '/auth': {\n      name: 'Authentication Service',\n      description: 'Handles user login, signup, and token verification',\n      connectionSteps: ['1. Ensure backend authentication service is running on port 8080', '2. Verify JWT token configuration in environment variables', '3. Check database connection for user credentials storage', '4. Confirm OTP service integration (SMS/Email provider)']\n    },\n    '/products': {\n      name: 'Product Catalog Service',\n      description: 'Manages product information, categories, and inventory',\n      connectionSteps: ['1. Start product microservice on designated port', '2. Connect to product database (MongoDB/PostgreSQL)', '3. Verify image storage service (AWS S3/CloudFront)', '4. Check search engine integration (Elasticsearch)']\n    },\n    '/orders': {\n      name: 'Order Management Service',\n      description: 'Processes orders, tracking, and order history',\n      connectionSteps: ['1. Launch order processing service', '2. Connect to orders database', '3. Verify payment gateway integration', '4. Check shipping provider API connections']\n    },\n    '/payments': {\n      name: 'Payment Processing Service',\n      description: 'Handles payment transactions and refunds',\n      connectionSteps: ['1. Configure payment gateway (Stripe/PayPal)', '2. Set up webhook endpoints for payment events', '3. Verify SSL certificates for secure transactions', '4. Test payment provider API credentials']\n    },\n    '/cart': {\n      name: 'Shopping Cart Service',\n      description: 'Manages user shopping cart and session data',\n      connectionSteps: ['1. Start cart service with Redis/session storage', '2. Configure session timeout settings', '3. Verify user authentication integration', '4. Check cart persistence database connection']\n    },\n    '/users': {\n      name: 'User Management Service',\n      description: 'Handles user profiles and administrative functions',\n      connectionSteps: ['1. Start user management microservice', '2. Connect to user database', '3. Verify role-based access control (RBAC)', '4. Check email notification service integration']\n    },\n    '/inventory': {\n      name: 'Inventory Management Service',\n      description: 'Tracks stock levels and inventory updates',\n      connectionSteps: ['1. Launch inventory tracking service', '2. Connect to inventory database', '3. Set up real-time stock update webhooks', '4. Configure low-stock alert notifications']\n    },\n    '/emails': {\n      name: 'Email Notification Service',\n      description: 'Sends transactional and marketing emails',\n      connectionSteps: ['1. Configure email service provider (SendGrid/AWS SES)', '2. Set up email templates and SMTP settings', '3. Verify domain authentication (SPF/DKIM)', '4. Test email delivery and bounce handling']\n    },\n    '/analytics': {\n      name: 'Analytics & Reporting Service',\n      description: 'Provides business intelligence and metrics',\n      connectionSteps: ['1. Start analytics data processing service', '2. Connect to analytics database (ClickHouse/BigQuery)', '3. Set up data pipeline and ETL processes', '4. Configure real-time dashboard updates']\n    },\n    '/wishlist': {\n      name: 'Wishlist Service',\n      description: 'Manages user wishlists and favorites',\n      connectionSteps: ['1. Start wishlist microservice', '2. Connect to user preferences database', '3. Verify user authentication integration', '4. Set up wishlist sharing functionality']\n    },\n    '/reviews': {\n      name: 'Review & Rating Service',\n      description: 'Handles product reviews and ratings',\n      connectionSteps: ['1. Launch review management service', '2. Connect to reviews database', '3. Set up content moderation system', '4. Configure review notification system']\n    },\n    '/coupons': {\n      name: 'Coupon & Discount Service',\n      description: 'Manages promotional codes and discounts',\n      connectionSteps: ['1. Start coupon validation service', '2. Connect to promotions database', '3. Set up usage tracking and limits', '4. Configure expiration and validation rules']\n    }\n  };\n\n  // Find matching service based on endpoint\n  for (const [path, info] of Object.entries(serviceMap)) {\n    if (endpoint.includes(path)) {\n      return info;\n    }\n  }\n  return {\n    name: 'Backend API Service',\n    description: 'General backend service',\n    connectionSteps: ['1. Ensure backend server is running', '2. Check network connectivity', '3. Verify API endpoint configuration', '4. Confirm service dependencies are available']\n  };\n};\n\n// Response interceptor for service information display\napi.interceptors.response.use(response => response, error => {\n  var _error$config, _error$response;\n  const endpoint = ((_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url) || '';\n  const serviceInfo = getServiceInfo(endpoint);\n\n  // Create informative message instead of error\n  const serviceMessage = {\n    serviceName: serviceInfo.name,\n    description: serviceInfo.description,\n    connectionSteps: serviceInfo.connectionSteps,\n    endpoint: `${API_BASE_URL}${endpoint}`,\n    timestamp: new Date().toISOString(),\n    originalError: error.message\n  };\n  console.log('ğŸ”Œ Service Connection Info:', serviceMessage);\n\n  // Dispatch service info event for the modal\n  if (typeof window !== 'undefined' && window.showServiceInfo) {\n    window.showServiceInfo(serviceMessage);\n  }\n\n  // Show user-friendly message\n  if (typeof window !== 'undefined' && window.toast) {\n    window.toast.error(`Unable to connect to ${serviceInfo.name}. Click to see connection steps.`);\n  }\n\n  // Handle authentication specifically\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    if (typeof window !== 'undefined') {\n      window.location.href = '/login';\n    }\n  }\n\n  // Return service info instead of rejecting\n  return Promise.resolve({\n    data: {\n      serviceInfo: serviceMessage,\n      mockData: true,\n      message: `Service information for ${serviceInfo.name}`\n    }\n  });\n});\n\n// Auth API\nexport const authAPI = {\n  sendOTP: data => api.post('/auth/send-otp', data),\n  login: data => api.post('/auth/login', data),\n  signup: data => api.post('/auth/signup', data),\n  verifyToken: token => api.get('/auth/verify', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  }),\n  updateProfile: data => api.put('/auth/profile', data),\n  changePassword: data => api.put('/auth/change-password', data)\n};\n\n// Products API\nexport const productsAPI = {\n  getAll: params => api.get('/products', {\n    params\n  }),\n  getById: id => api.get(`/products/${id}`),\n  getByCategory: (category, params) => api.get(`/products/category/${category}`, {\n    params\n  }),\n  getFeatured: () => api.get('/products/featured'),\n  getBestSellers: () => api.get('/products/best-sellers'),\n  getNewArrivals: () => api.get('/products/new-arrivals'),\n  search: (query, params) => api.get('/products/search', {\n    params: {\n      q: query,\n      ...params\n    }\n  }),\n  getCategories: () => api.get('/products/categories'),\n  getFilters: () => api.get('/products/filters'),\n  // Admin endpoints\n  create: data => api.post('/products', data),\n  update: (id, data) => api.put(`/products/${id}`, data),\n  delete: id => api.delete(`/products/${id}`),\n  updateStock: (id, stock) => api.patch(`/products/${id}/stock`, {\n    stock\n  })\n};\n\n// Orders API\nexport const ordersAPI = {\n  create: data => api.post('/orders', data),\n  getById: id => api.get(`/orders/${id}`),\n  getUserOrders: userId => api.get(`/orders/user/${userId}`),\n  trackOrder: orderId => api.get(`/orders/${orderId}/track`),\n  // Admin endpoints\n  getAll: params => api.get('/orders', {\n    params\n  }),\n  updateStatus: (id, status) => api.patch(`/orders/${id}/status`, {\n    status\n  }),\n  getOrderStats: () => api.get('/orders/stats')\n};\n\n// Cart API (if using server-side cart)\nexport const cartAPI = {\n  get: () => api.get('/cart'),\n  add: data => api.post('/cart/items', data),\n  update: (itemId, data) => api.put(`/cart/items/${itemId}`, data),\n  remove: itemId => api.delete(`/cart/items/${itemId}`),\n  clear: () => api.delete('/cart')\n};\n\n// Payment API\nexport const paymentAPI = {\n  createPaymentIntent: data => api.post('/payments/create-intent', data),\n  confirmPayment: data => api.post('/payments/confirm', data),\n  getPaymentMethods: () => api.get('/payments/methods'),\n  refund: (paymentId, amount) => api.post(`/payments/${paymentId}/refund`, {\n    amount\n  })\n};\n\n// Users API (Admin)\nexport const usersAPI = {\n  getAll: params => api.get('/users', {\n    params\n  }),\n  getById: id => api.get(`/users/${id}`),\n  update: (id, data) => api.put(`/users/${id}`, data),\n  delete: id => api.delete(`/users/${id}`),\n  getUserStats: () => api.get('/users/stats')\n};\n\n// Inventory API\nexport const inventoryAPI = {\n  getAll: params => api.get('/inventory', {\n    params\n  }),\n  getById: id => api.get(`/inventory/${id}`),\n  update: (id, data) => api.put(`/inventory/${id}`, data),\n  getLowStock: () => api.get('/inventory/low-stock'),\n  getStockAlerts: () => api.get('/inventory/alerts')\n};\n\n// Email API\nexport const emailAPI = {\n  sendOrderConfirmation: orderId => api.post(`/emails/order-confirmation/${orderId}`),\n  sendPaymentConfirmation: paymentId => api.post(`/emails/payment-confirmation/${paymentId}`),\n  sendShippingNotification: orderId => api.post(`/emails/shipping-notification/${orderId}`),\n  sendCustomEmail: data => api.post('/emails/custom', data),\n  getEmailTemplates: () => api.get('/emails/templates'),\n  updateEmailTemplate: (id, data) => api.put(`/emails/templates/${id}`, data)\n};\n\n// Analytics API\nexport const analyticsAPI = {\n  getDashboardStats: () => api.get('/analytics/dashboard'),\n  getSalesData: period => api.get(`/analytics/sales/${period}`),\n  getTopProducts: (limit = 10) => api.get(`/analytics/top-products?limit=${limit}`),\n  getCustomerInsights: () => api.get('/analytics/customers'),\n  getRevenueData: period => api.get(`/analytics/revenue/${period}`)\n};\n\n// Wishlist API\nexport const wishlistAPI = {\n  get: () => api.get('/wishlist'),\n  add: productId => api.post('/wishlist', {\n    productId\n  }),\n  remove: productId => api.delete(`/wishlist/${productId}`),\n  clear: () => api.delete('/wishlist')\n};\n\n// Reviews API\nexport const reviewsAPI = {\n  getByProduct: productId => api.get(`/reviews/product/${productId}`),\n  create: data => api.post('/reviews', data),\n  update: (id, data) => api.put(`/reviews/${id}`, data),\n  delete: id => api.delete(`/reviews/${id}`),\n  getAll: params => api.get('/reviews', {\n    params\n  })\n};\n\n// Coupons API\nexport const couponsAPI = {\n  validate: code => api.post('/coupons/validate', {\n    code\n  }),\n  apply: (code, orderData) => api.post('/coupons/apply', {\n    code,\n    ...orderData\n  }),\n  // Admin endpoints\n  getAll: params => api.get('/coupons', {\n    params\n  }),\n  create: data => api.post('/coupons', data),\n  update: (id, data) => api.put(`/coupons/${id}`, data),\n  delete: id => api.delete(`/coupons/${id}`)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getServiceInfo","endpoint","serviceMap","name","description","connectionSteps","path","info","Object","entries","includes","response","_error$config","_error$response","url","serviceInfo","serviceMessage","serviceName","timestamp","Date","toISOString","originalError","message","console","log","window","showServiceInfo","toast","status","removeItem","location","href","resolve","data","mockData","authAPI","sendOTP","post","login","signup","verifyToken","get","updateProfile","put","changePassword","productsAPI","getAll","params","getById","id","getByCategory","category","getFeatured","getBestSellers","getNewArrivals","search","query","q","getCategories","getFilters","update","delete","updateStock","stock","patch","ordersAPI","getUserOrders","userId","trackOrder","orderId","updateStatus","getOrderStats","cartAPI","add","itemId","remove","clear","paymentAPI","createPaymentIntent","confirmPayment","getPaymentMethods","refund","paymentId","amount","usersAPI","getUserStats","inventoryAPI","getLowStock","getStockAlerts","emailAPI","sendOrderConfirmation","sendPaymentConfirmation","sendShippingNotification","sendCustomEmail","getEmailTemplates","updateEmailTemplate","analyticsAPI","getDashboardStats","getSalesData","period","getTopProducts","limit","getCustomerInsights","getRevenueData","wishlistAPI","productId","reviewsAPI","getByProduct","couponsAPI","validate","code","apply","orderData"],"sources":["D:/test/ecomm/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base API configuration\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Helper function to get service information\nconst getServiceInfo = (endpoint) => {\n  const serviceMap = {\n    '/auth': {\n      name: 'Authentication Service',\n      description: 'Handles user login, signup, and token verification',\n      connectionSteps: [\n        '1. Ensure backend authentication service is running on port 8080',\n        '2. Verify JWT token configuration in environment variables',\n        '3. Check database connection for user credentials storage',\n        '4. Confirm OTP service integration (SMS/Email provider)'\n      ]\n    },\n    '/products': {\n      name: 'Product Catalog Service',\n      description: 'Manages product information, categories, and inventory',\n      connectionSteps: [\n        '1. Start product microservice on designated port',\n        '2. Connect to product database (MongoDB/PostgreSQL)',\n        '3. Verify image storage service (AWS S3/CloudFront)',\n        '4. Check search engine integration (Elasticsearch)'\n      ]\n    },\n    '/orders': {\n      name: 'Order Management Service',\n      description: 'Processes orders, tracking, and order history',\n      connectionSteps: [\n        '1. Launch order processing service',\n        '2. Connect to orders database',\n        '3. Verify payment gateway integration',\n        '4. Check shipping provider API connections'\n      ]\n    },\n    '/payments': {\n      name: 'Payment Processing Service',\n      description: 'Handles payment transactions and refunds',\n      connectionSteps: [\n        '1. Configure payment gateway (Stripe/PayPal)',\n        '2. Set up webhook endpoints for payment events',\n        '3. Verify SSL certificates for secure transactions',\n        '4. Test payment provider API credentials'\n      ]\n    },\n    '/cart': {\n      name: 'Shopping Cart Service',\n      description: 'Manages user shopping cart and session data',\n      connectionSteps: [\n        '1. Start cart service with Redis/session storage',\n        '2. Configure session timeout settings',\n        '3. Verify user authentication integration',\n        '4. Check cart persistence database connection'\n      ]\n    },\n    '/users': {\n      name: 'User Management Service',\n      description: 'Handles user profiles and administrative functions',\n      connectionSteps: [\n        '1. Start user management microservice',\n        '2. Connect to user database',\n        '3. Verify role-based access control (RBAC)',\n        '4. Check email notification service integration'\n      ]\n    },\n    '/inventory': {\n      name: 'Inventory Management Service',\n      description: 'Tracks stock levels and inventory updates',\n      connectionSteps: [\n        '1. Launch inventory tracking service',\n        '2. Connect to inventory database',\n        '3. Set up real-time stock update webhooks',\n        '4. Configure low-stock alert notifications'\n      ]\n    },\n    '/emails': {\n      name: 'Email Notification Service',\n      description: 'Sends transactional and marketing emails',\n      connectionSteps: [\n        '1. Configure email service provider (SendGrid/AWS SES)',\n        '2. Set up email templates and SMTP settings',\n        '3. Verify domain authentication (SPF/DKIM)',\n        '4. Test email delivery and bounce handling'\n      ]\n    },\n    '/analytics': {\n      name: 'Analytics & Reporting Service',\n      description: 'Provides business intelligence and metrics',\n      connectionSteps: [\n        '1. Start analytics data processing service',\n        '2. Connect to analytics database (ClickHouse/BigQuery)',\n        '3. Set up data pipeline and ETL processes',\n        '4. Configure real-time dashboard updates'\n      ]\n    },\n    '/wishlist': {\n      name: 'Wishlist Service',\n      description: 'Manages user wishlists and favorites',\n      connectionSteps: [\n        '1. Start wishlist microservice',\n        '2. Connect to user preferences database',\n        '3. Verify user authentication integration',\n        '4. Set up wishlist sharing functionality'\n      ]\n    },\n    '/reviews': {\n      name: 'Review & Rating Service',\n      description: 'Handles product reviews and ratings',\n      connectionSteps: [\n        '1. Launch review management service',\n        '2. Connect to reviews database',\n        '3. Set up content moderation system',\n        '4. Configure review notification system'\n      ]\n    },\n    '/coupons': {\n      name: 'Coupon & Discount Service',\n      description: 'Manages promotional codes and discounts',\n      connectionSteps: [\n        '1. Start coupon validation service',\n        '2. Connect to promotions database',\n        '3. Set up usage tracking and limits',\n        '4. Configure expiration and validation rules'\n      ]\n    }\n  };\n\n  // Find matching service based on endpoint\n  for (const [path, info] of Object.entries(serviceMap)) {\n    if (endpoint.includes(path)) {\n      return info;\n    }\n  }\n\n  return {\n    name: 'Backend API Service',\n    description: 'General backend service',\n    connectionSteps: [\n      '1. Ensure backend server is running',\n      '2. Check network connectivity',\n      '3. Verify API endpoint configuration',\n      '4. Confirm service dependencies are available'\n    ]\n  };\n};\n\n// Response interceptor for service information display\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const endpoint = error.config?.url || '';\n    const serviceInfo = getServiceInfo(endpoint);\n    \n    // Create informative message instead of error\n    const serviceMessage = {\n      serviceName: serviceInfo.name,\n      description: serviceInfo.description,\n      connectionSteps: serviceInfo.connectionSteps,\n      endpoint: `${API_BASE_URL}${endpoint}`,\n      timestamp: new Date().toISOString(),\n      originalError: error.message\n    };\n\n    console.log('ğŸ”Œ Service Connection Info:', serviceMessage);\n    \n    // Dispatch service info event for the modal\n    if (typeof window !== 'undefined' && window.showServiceInfo) {\n      window.showServiceInfo(serviceMessage);\n    }\n    \n    // Show user-friendly message\n    if (typeof window !== 'undefined' && window.toast) {\n      window.toast.error(`Unable to connect to ${serviceInfo.name}. Click to see connection steps.`);\n    }\n\n    // Handle authentication specifically\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      if (typeof window !== 'undefined') {\n        window.location.href = '/login';\n      }\n    }\n\n    // Return service info instead of rejecting\n    return Promise.resolve({\n      data: {\n        serviceInfo: serviceMessage,\n        mockData: true,\n        message: `Service information for ${serviceInfo.name}`\n      }\n    });\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  sendOTP: (data) => api.post('/auth/send-otp', data),\n  login: (data) => api.post('/auth/login', data),\n  signup: (data) => api.post('/auth/signup', data),\n  verifyToken: (token) => api.get('/auth/verify', {\n    headers: { Authorization: `Bearer ${token}` }\n  }),\n  updateProfile: (data) => api.put('/auth/profile', data),\n  changePassword: (data) => api.put('/auth/change-password', data),\n};\n\n// Products API\nexport const productsAPI = {\n  getAll: (params) => api.get('/products', { params }),\n  getById: (id) => api.get(`/products/${id}`),\n  getByCategory: (category, params) => api.get(`/products/category/${category}`, { params }),\n  getFeatured: () => api.get('/products/featured'),\n  getBestSellers: () => api.get('/products/best-sellers'),\n  getNewArrivals: () => api.get('/products/new-arrivals'),\n  search: (query, params) => api.get('/products/search', { params: { q: query, ...params } }),\n  getCategories: () => api.get('/products/categories'),\n  getFilters: () => api.get('/products/filters'),\n  \n  // Admin endpoints\n  create: (data) => api.post('/products', data),\n  update: (id, data) => api.put(`/products/${id}`, data),\n  delete: (id) => api.delete(`/products/${id}`),\n  updateStock: (id, stock) => api.patch(`/products/${id}/stock`, { stock }),\n};\n\n// Orders API\nexport const ordersAPI = {\n  create: (data) => api.post('/orders', data),\n  getById: (id) => api.get(`/orders/${id}`),\n  getUserOrders: (userId) => api.get(`/orders/user/${userId}`),\n  trackOrder: (orderId) => api.get(`/orders/${orderId}/track`),\n  \n  // Admin endpoints\n  getAll: (params) => api.get('/orders', { params }),\n  updateStatus: (id, status) => api.patch(`/orders/${id}/status`, { status }),\n  getOrderStats: () => api.get('/orders/stats'),\n};\n\n// Cart API (if using server-side cart)\nexport const cartAPI = {\n  get: () => api.get('/cart'),\n  add: (data) => api.post('/cart/items', data),\n  update: (itemId, data) => api.put(`/cart/items/${itemId}`, data),\n  remove: (itemId) => api.delete(`/cart/items/${itemId}`),\n  clear: () => api.delete('/cart'),\n};\n\n// Payment API\nexport const paymentAPI = {\n  createPaymentIntent: (data) => api.post('/payments/create-intent', data),\n  confirmPayment: (data) => api.post('/payments/confirm', data),\n  getPaymentMethods: () => api.get('/payments/methods'),\n  refund: (paymentId, amount) => api.post(`/payments/${paymentId}/refund`, { amount }),\n};\n\n// Users API (Admin)\nexport const usersAPI = {\n  getAll: (params) => api.get('/users', { params }),\n  getById: (id) => api.get(`/users/${id}`),\n  update: (id, data) => api.put(`/users/${id}`, data),\n  delete: (id) => api.delete(`/users/${id}`),\n  getUserStats: () => api.get('/users/stats'),\n};\n\n// Inventory API\nexport const inventoryAPI = {\n  getAll: (params) => api.get('/inventory', { params }),\n  getById: (id) => api.get(`/inventory/${id}`),\n  update: (id, data) => api.put(`/inventory/${id}`, data),\n  getLowStock: () => api.get('/inventory/low-stock'),\n  getStockAlerts: () => api.get('/inventory/alerts'),\n};\n\n// Email API\nexport const emailAPI = {\n  sendOrderConfirmation: (orderId) => api.post(`/emails/order-confirmation/${orderId}`),\n  sendPaymentConfirmation: (paymentId) => api.post(`/emails/payment-confirmation/${paymentId}`),\n  sendShippingNotification: (orderId) => api.post(`/emails/shipping-notification/${orderId}`),\n  sendCustomEmail: (data) => api.post('/emails/custom', data),\n  getEmailTemplates: () => api.get('/emails/templates'),\n  updateEmailTemplate: (id, data) => api.put(`/emails/templates/${id}`, data),\n};\n\n// Analytics API\nexport const analyticsAPI = {\n  getDashboardStats: () => api.get('/analytics/dashboard'),\n  getSalesData: (period) => api.get(`/analytics/sales/${period}`),\n  getTopProducts: (limit = 10) => api.get(`/analytics/top-products?limit=${limit}`),\n  getCustomerInsights: () => api.get('/analytics/customers'),\n  getRevenueData: (period) => api.get(`/analytics/revenue/${period}`),\n};\n\n// Wishlist API\nexport const wishlistAPI = {\n  get: () => api.get('/wishlist'),\n  add: (productId) => api.post('/wishlist', { productId }),\n  remove: (productId) => api.delete(`/wishlist/${productId}`),\n  clear: () => api.delete('/wishlist'),\n};\n\n// Reviews API\nexport const reviewsAPI = {\n  getByProduct: (productId) => api.get(`/reviews/product/${productId}`),\n  create: (data) => api.post('/reviews', data),\n  update: (id, data) => api.put(`/reviews/${id}`, data),\n  delete: (id) => api.delete(`/reviews/${id}`),\n  getAll: (params) => api.get('/reviews', { params }),\n};\n\n// Coupons API\nexport const couponsAPI = {\n  validate: (code) => api.post('/coupons/validate', { code }),\n  apply: (code, orderData) => api.post('/coupons/apply', { code, ...orderData }),\n  \n  // Admin endpoints\n  getAll: (params) => api.get('/coupons', { params }),\n  create: (data) => api.post('/coupons', data),\n  update: (id, data) => api.put(`/coupons/${id}`, data),\n  delete: (id) => api.delete(`/coupons/${id}`),\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}