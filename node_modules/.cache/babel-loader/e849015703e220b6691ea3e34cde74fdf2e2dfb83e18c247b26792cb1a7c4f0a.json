{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sumit\\\\ecomm\\\\src\\\\contexts\\\\ServiceInfoContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport ServiceInfoModal from '../components/common/ServiceInfoModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ServiceInfoContext = /*#__PURE__*/createContext();\nexport const useServiceInfo = () => {\n  _s();\n  const context = useContext(ServiceInfoContext);\n  if (!context) {\n    throw new Error('useServiceInfo must be used within a ServiceInfoProvider');\n  }\n  return context;\n};\n_s(useServiceInfo, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ServiceInfoProvider = ({\n  children\n}) => {\n  _s2();\n  const [serviceInfo, setServiceInfo] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [serviceHistory, setServiceHistory] = useState([]);\n  const [autoShowModal, setAutoShowModal] = useState(true);\n\n  // Listen for service info from API interceptor\n  useEffect(() => {\n    const handleServiceInfo = event => {\n      const {\n        detail\n      } = event;\n      if (detail && detail.serviceInfo) {\n        setServiceInfo(detail.serviceInfo);\n        setServiceHistory(prev => [detail.serviceInfo, ...prev.slice(0, 9) // Keep last 10 service calls\n        ]);\n        if (autoShowModal) {\n          setIsModalOpen(true);\n        }\n      }\n    };\n\n    // Create custom event listener for service info\n    window.addEventListener('serviceInfo', handleServiceInfo);\n\n    // Make service info available globally for API interceptor\n    window.showServiceInfo = serviceInfo => {\n      window.dispatchEvent(new CustomEvent('serviceInfo', {\n        detail: {\n          serviceInfo\n        }\n      }));\n    };\n    return () => {\n      window.removeEventListener('serviceInfo', handleServiceInfo);\n      delete window.showServiceInfo;\n    };\n  }, [autoShowModal]);\n  const showServiceInfo = info => {\n    setServiceInfo(info);\n    setIsModalOpen(true);\n  };\n  const hideServiceInfo = () => {\n    setIsModalOpen(false);\n  };\n  const toggleAutoShow = () => {\n    setAutoShowModal(prev => !prev);\n  };\n  const clearHistory = () => {\n    setServiceHistory([]);\n  };\n  const getServiceStats = () => {\n    var _serviceHistory$;\n    const stats = serviceHistory.reduce((acc, service) => {\n      const serviceName = service.serviceName;\n      acc[serviceName] = (acc[serviceName] || 0) + 1;\n      return acc;\n    }, {});\n    return {\n      totalCalls: serviceHistory.length,\n      uniqueServices: Object.keys(stats).length,\n      serviceBreakdown: stats,\n      lastCall: (_serviceHistory$ = serviceHistory[0]) === null || _serviceHistory$ === void 0 ? void 0 : _serviceHistory$.timestamp\n    };\n  };\n  const value = {\n    serviceInfo,\n    isModalOpen,\n    serviceHistory,\n    autoShowModal,\n    showServiceInfo,\n    hideServiceInfo,\n    toggleAutoShow,\n    clearHistory,\n    getServiceStats\n  };\n  return /*#__PURE__*/_jsxDEV(ServiceInfoContext.Provider, {\n    value: value,\n    children: [children, /*#__PURE__*/_jsxDEV(ServiceInfoModal, {\n      isOpen: isModalOpen,\n      onClose: hideServiceInfo,\n      serviceInfo: serviceInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s2(ServiceInfoProvider, \"CLRxioYgoR3QxToQXjImu1ZO8L8=\");\n_c = ServiceInfoProvider;\nexport default ServiceInfoContext;\nvar _c;\n$RefreshReg$(_c, \"ServiceInfoProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ServiceInfoModal","jsxDEV","_jsxDEV","ServiceInfoContext","useServiceInfo","_s","context","Error","ServiceInfoProvider","children","_s2","serviceInfo","setServiceInfo","isModalOpen","setIsModalOpen","serviceHistory","setServiceHistory","autoShowModal","setAutoShowModal","handleServiceInfo","event","detail","prev","slice","window","addEventListener","showServiceInfo","dispatchEvent","CustomEvent","removeEventListener","info","hideServiceInfo","toggleAutoShow","clearHistory","getServiceStats","_serviceHistory$","stats","reduce","acc","service","serviceName","totalCalls","length","uniqueServices","Object","keys","serviceBreakdown","lastCall","timestamp","value","Provider","isOpen","onClose","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sumit/ecomm/src/contexts/ServiceInfoContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport ServiceInfoModal from '../components/common/ServiceInfoModal';\n\nconst ServiceInfoContext = createContext();\n\nexport const useServiceInfo = () => {\n  const context = useContext(ServiceInfoContext);\n  if (!context) {\n    throw new Error('useServiceInfo must be used within a ServiceInfoProvider');\n  }\n  return context;\n};\n\nexport const ServiceInfoProvider = ({ children }) => {\n  const [serviceInfo, setServiceInfo] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [serviceHistory, setServiceHistory] = useState([]);\n  const [autoShowModal, setAutoShowModal] = useState(true);\n\n  // Listen for service info from API interceptor\n  useEffect(() => {\n    const handleServiceInfo = (event) => {\n      const { detail } = event;\n      if (detail && detail.serviceInfo) {\n        setServiceInfo(detail.serviceInfo);\n        setServiceHistory(prev => [\n          detail.serviceInfo,\n          ...prev.slice(0, 9) // Keep last 10 service calls\n        ]);\n        \n        if (autoShowModal) {\n          setIsModalOpen(true);\n        }\n      }\n    };\n\n    // Create custom event listener for service info\n    window.addEventListener('serviceInfo', handleServiceInfo);\n    \n    // Make service info available globally for API interceptor\n    window.showServiceInfo = (serviceInfo) => {\n      window.dispatchEvent(new CustomEvent('serviceInfo', {\n        detail: { serviceInfo }\n      }));\n    };\n\n    return () => {\n      window.removeEventListener('serviceInfo', handleServiceInfo);\n      delete window.showServiceInfo;\n    };\n  }, [autoShowModal]);\n\n  const showServiceInfo = (info) => {\n    setServiceInfo(info);\n    setIsModalOpen(true);\n  };\n\n  const hideServiceInfo = () => {\n    setIsModalOpen(false);\n  };\n\n  const toggleAutoShow = () => {\n    setAutoShowModal(prev => !prev);\n  };\n\n  const clearHistory = () => {\n    setServiceHistory([]);\n  };\n\n  const getServiceStats = () => {\n    const stats = serviceHistory.reduce((acc, service) => {\n      const serviceName = service.serviceName;\n      acc[serviceName] = (acc[serviceName] || 0) + 1;\n      return acc;\n    }, {});\n\n    return {\n      totalCalls: serviceHistory.length,\n      uniqueServices: Object.keys(stats).length,\n      serviceBreakdown: stats,\n      lastCall: serviceHistory[0]?.timestamp\n    };\n  };\n\n  const value = {\n    serviceInfo,\n    isModalOpen,\n    serviceHistory,\n    autoShowModal,\n    showServiceInfo,\n    hideServiceInfo,\n    toggleAutoShow,\n    clearHistory,\n    getServiceStats\n  };\n\n  return (\n    <ServiceInfoContext.Provider value={value}>\n      {children}\n      <ServiceInfoModal\n        isOpen={isModalOpen}\n        onClose={hideServiceInfo}\n        serviceInfo={serviceInfo}\n      />\n    </ServiceInfoContext.Provider>\n  );\n};\n\nexport default ServiceInfoContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}